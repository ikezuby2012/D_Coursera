// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250515153738_fix_ExamQuestionOptions")]
    partial class fix_ExamQuestionOptions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.AssignmentSubmission.AssignmentSubmissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assignment_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Feedback")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("feedback");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("file_url");

                    b.Property<double?>("Grade")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)")
                        .HasColumnName("grade");

                    b.Property<DateTime?>("GradedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("graded_at");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_soft_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("modified_by");

                    b.Property<string>("SubmissionText")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("submission_text");

                    b.Property<Guid>("SubmittedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("submitted_by_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tbl_assignment_submission");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_tbl_assignment_submission_assignment_id");

                    b.HasIndex("SubmittedById")
                        .HasDatabaseName("ix_tbl_assignment_submission_submitted_by_id");

                    b.ToTable("TBL_ASSIGNMENT_SUBMISSION", "dbo");
                });

            modelBuilder.Entity("Domain.AssignmentType.AssignmentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tbl_assignment_types");

                    b.ToTable("TBL_ASSIGNMENT_TYPES", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "QUIZ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ESSAY"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UPLOAD"
                        },
                        new
                        {
                            Id = 4,
                            Name = "MULTIPLE_CHOICE"
                        });
                });

            modelBuilder.Entity("Domain.Assignments.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int?>("AssignmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_type_id");

                    b.Property<string>("CollectionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("collection_name");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_soft_deleted");

                    b.Property<double>("MaxScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)")
                        .HasColumnName("max_score");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tbl_assignment");

                    b.HasIndex("AssignmentTypeId")
                        .HasDatabaseName("ix_tbl_assignment_assignment_type_id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_tbl_assignment_course_id");

                    b.ToTable("TBL_ASSIGNMENT", "dbo");
                });

            modelBuilder.Entity("Domain.Course.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Availability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("availability");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("duration");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("instructor_id");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_soft_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tbl_courses");

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("ix_tbl_courses_instructor_id");

                    b.ToTable("TBL_COURSES", "dbo");
                });

            modelBuilder.Entity("Domain.Exams.ExamAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("answer_text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_correct");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_soft_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("submission_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tbl_exam_answer");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_tbl_exam_answer_question_id");

                    b.HasIndex("SubmissionId")
                        .HasDatabaseName("ix_tbl_exam_answer_submission_id");

                    b.ToTable("TBL_EXAM_ANSWER", "dbo");
                });

            modelBuilder.Entity("Domain.Exams.ExamQuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_correct");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_soft_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("modified_by");

                    b.Property<string>("OptionLabel")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasColumnName("option_label");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("option_text");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tbl_exam_question_option");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_tbl_exam_question_option_question_id");

                    b.ToTable("TBL_EXAM_QUESTION_OPTION", "dbo");
                });

            modelBuilder.Entity("Domain.Exams.ExamQuestions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_id");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_soft_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("modified_by");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("question_text");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tbl_exam_questions");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_tbl_exam_questions_exam_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_tbl_exam_questions_type_id");

                    b.ToTable("TBL_EXAM_QUESTIONS", "dbo");
                });

            modelBuilder.Entity("Domain.Exams.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tbl_exam_types");

                    b.ToTable("TBL_EXAM_TYPES", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Multiple Choice"
                        },
                        new
                        {
                            Id = 2,
                            Name = "True or False"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fill In The Blank"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Match The Following"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Brief Answer Only"
                        });
                });

            modelBuilder.Entity("Domain.Exams.Exams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<string>("Instructions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("instructions");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("instructor_id");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_soft_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("modified_by");

                    b.Property<decimal>("PassingMarks")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("passing_marks");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("title");

                    b.Property<decimal>("TotalMarks")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_marks");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tbl_exam");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_tbl_exam_course_id");

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("ix_tbl_exam_instructor_id");

                    b.HasIndex("StartTime", "EndTime")
                        .HasDatabaseName("ix_tbl_exam_start_time_end_time");

                    b.ToTable("TBL_EXAM", "dbo", t =>
                        {
                            t.HasCheckConstraint("CK_Exams_Status", "[Status] IN ('Scheduled', 'InProgress', 'Completed', 'PostPoned', 'Cancelled')");
                        });
                });

            modelBuilder.Entity("Domain.Exams.ExamsSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_id");

                    b.Property<DateTime?>("GradedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("graded_at");

                    b.Property<Guid>("GradedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("graded_by_id");

                    b.Property<bool>("IsGraded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_graded");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_soft_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.Property<decimal?>("TotalScore")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_score");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tbl_exam_submission");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_tbl_exam_submission_exam_id");

                    b.HasIndex("GradedById")
                        .HasDatabaseName("ix_tbl_exam_submission_graded_by_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_tbl_exam_submission_student_id");

                    b.ToTable("TBL_EXAM_SUBMISSION", "dbo");
                });

            modelBuilder.Entity("Domain.Media.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CollectionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("collection_name");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_soft_deleted");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("media_url");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tbl_media");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_tbl_media_course_id");

                    b.ToTable("TBL_MEDIA", "dbo");
                });

            modelBuilder.Entity("Domain.Todos.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_completed");

                    b.Property<string>("Labels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("labels");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_todo_items");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_todo_items_user_id");

                    b.ToTable("todo_items", "dbo");
                });

            modelBuilder.Entity("Domain.UserRole.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tbl_roles");

                    b.ToTable("TBL_ROLES", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Business_Developer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Instructor"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("CREATED_BY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_SOFT_DELETED");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2")
                        .HasColumnName("LAST_LOGIN");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("OTP");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<bool>("isVerifed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_VERIFIED");

                    b.HasKey("Id")
                        .HasName("pk_tbl_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_tbl_users_email");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_tbl_users_role_id");

                    b.ToTable("TBL_USERS", "dbo");
                });

            modelBuilder.Entity("Domain.AssignmentSubmission.AssignmentSubmissions", b =>
                {
                    b.HasOne("Domain.Assignments.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_assignment_submission_tbl_assignment_assignment_id");

                    b.HasOne("Domain.Users.User", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_assignment_submission_tbl_users_submitted_by_id");

                    b.Navigation("Assignment");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("Domain.Assignments.Assignment", b =>
                {
                    b.HasOne("Domain.AssignmentType.AssignmentTypes", "AssignmentTypes")
                        .WithMany()
                        .HasForeignKey("AssignmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_tbl_assignment_assignment_types_assignment_type_id");

                    b.HasOne("Domain.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_assignment_tbl_courses_course_id");

                    b.Navigation("AssignmentTypes");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Course.Course", b =>
                {
                    b.HasOne("Domain.Users.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_courses_tbl_users_instructor_id");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Domain.Exams.ExamAnswer", b =>
                {
                    b.HasOne("Domain.Exams.ExamQuestions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_exam_answer_tbl_exam_questions_question_id");

                    b.HasOne("Domain.Exams.ExamsSubmission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_exam_answer_tbl_exam_submission_submission_id");

                    b.Navigation("Questions");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Domain.Exams.ExamQuestionOption", b =>
                {
                    b.HasOne("Domain.Exams.ExamQuestions", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_exam_question_option_tbl_exam_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Exams.ExamQuestions", b =>
                {
                    b.HasOne("Domain.Exams.Exams", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_exam_questions_tbl_exam_exam_id");

                    b.HasOne("Domain.Exams.ExamType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_exam_questions_exam_type_type_id");

                    b.Navigation("Exam");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Exams.Exams", b =>
                {
                    b.HasOne("Domain.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_exam_tbl_courses_course_id");

                    b.HasOne("Domain.Users.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_exam_tbl_users_instructor_id");

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Domain.Exams.ExamsSubmission", b =>
                {
                    b.HasOne("Domain.Exams.Exams", "Exams")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_exam_submission_tbl_exam_exam_id");

                    b.HasOne("Domain.Users.User", "GradedBy")
                        .WithMany()
                        .HasForeignKey("GradedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_exam_submission_tbl_users_graded_by_id");

                    b.HasOne("Domain.Users.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_exam_submission_tbl_users_student_id");

                    b.Navigation("Exams");

                    b.Navigation("GradedBy");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Media.Media", b =>
                {
                    b.HasOne("Domain.Course.Course", "Course")
                        .WithMany("MediaUrls")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_media_tbl_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Todos.TodoItem", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_items_tbl_users_user_id");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.UserRole.UserRoles", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_tbl_users_tbl_roles_role_id");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Domain.Course.Course", b =>
                {
                    b.Navigation("MediaUrls");
                });

            modelBuilder.Entity("Domain.Exams.ExamQuestions", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
